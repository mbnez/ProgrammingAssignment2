makeCacheMatrix <- function(x = matrix()){ ##define arg. with default mode matrix
  inv <- NULL                              ## inv as NULL, will hold val of matrix
  set <- function(y){                      ## define set function to assign new
    x <<-y                                 ## value of matrix in parent env.
    inv <<- NULL                           ##if new matrix, make inv back to NULL
  }
  get <- function() {x}                    ## define get function. 
  setInverse <- function(inverse) {inv <<- inverse}  ## assigns value of inv in parent env.
  getInverse <- function() {inv}                     ## gets value of inv, called
  list(set = set, get = get, setInverse = setInverse, getInverse = getInverse)  ##for reference to $ operator functions
}

cacheSolve <- function (x, ...){        ##return a matrix that is inverse of x 
  inv <- x$getInverse()
  if(!is.null(inv)){
    message('getting cached data')
    return(inv)
  }
  mat <-x$get()
  inv <- solve(mat, ...)
  x$setInverse(inv)
  inv
}
